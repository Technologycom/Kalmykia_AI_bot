import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from mistralai import Mistral
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
api_key = os.getenv("MISTRAL_API_KEY")
bot_token = os.getenv("BOT_TOKEN")
model = "mistral-small-latest"

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª—é—á–∏ —É–∫–∞–∑–∞–Ω—ã
if not api_key or not bot_token:
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env —É–∫–∞–∑–∞–Ω—ã MISTRAL_API_KEY –∏ BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mistral
client = Mistral(api_key=api_key)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=bot_token)
dp = Dispatcher()

# /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç, –ú–∏–∫–∞—Å–∞. –ù–∞–ø–∏—à–∏ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ —É –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É üôÇ")

# –û—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def handle_message(message: types.Message):
    response = client.chat.complete(
        model=model,
        messages=[
            {"role": "user", "content": message.text},
        ]
    )
    await message.answer(response.choices[0].message.content)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
